buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlint_version"
    }
}

plugins {
    id 'com.github.autostyle' version '3.1'
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.jlleitschuh.gradle.ktlint-idea'

group 'com.lunatech'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.slf4j:slf4j-api:$slf4j_api_version"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-api:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation "io.github.microutils:kotlin-logging:$logging_version"
    implementation "com.lmax:disruptor:$disruptorversion"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-auth:$ktor_version"
    implementation "com.google.api-client:google-api-client:1.30.9"
    implementation "io.ktor:ktor-server-sessions:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_module_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
    implementation "org.flywaydb:flyway-core:$flyway_version"
    implementation "io.github.config4k:config4k:$config4k_version"
    implementation "org.postgresql:postgresql:$postgresql_version"
    implementation "org.ktorm:ktorm-core:$ktorm_version"
    implementation "uy.kohesive.injekt:injekt-core:$injekt_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}

autostyle {
    kotlin {
        // optionally takes a version
        ktlint()
        // Optional user arguments can be set as such:
        ktlint {
            userData(['indent_size': '2', 'continuation_indent_size' : '2'])
        }
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    kotlinGradle {
        // same as kotlin, but for .gradle.kts files (defaults to '*.gradle.kts')
        filter.include 'additionalScripts/*.gradle.kts'

        ktlint()

        // Optional user arguments can be set as such:
        ktlint {
            userData(['indent_size': '2', 'continuation_indent_size' : '2'])
        }
    }
}

task buildAll(type: Exec, dependsOn: ['buildFrontApp']) {
    group "Build All App"
    description 'Build All App'
    executable "./gradlew"
    args "--no-daemon", "assemble"
}

//Build React App
task buildFrontApp(type: Exec, dependsOn: ['installReactApp']) {
    group "Front App"
    description 'Build React App'
    executable "npm"
    args "run-script", "build", "--prefix", "./frontend/"
}

//Install package npm for front app (React)
task installReactApp(type: Exec) {
    group "Front App"
    description 'Build React App'
    executable "npm"
    args "install", "--prefix", "./frontend/"
}

